name: Crowdin Sync

# 1. Trigger on push to main/master with en.json change
on:
  push:
    branches: [main, master]
    paths:
      - "messages/en.json"

  # 2. Trigger on Crowdin webhook via repository_dispatch
  # Requires: a webhook setup in Crowdin (see notes below)
  repository_dispatch:
    types: [crowdin_translation_ready]

permissions:
  contents: write # Required to push code
  pull-requests: write # Required to open PRs

jobs:
  ### ========== 1. UPLOAD JOB (only on push) ==========
  upload-to-crowdin:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes in en.json
        id: changes
        uses: tj-actions/changed-files@v40
        with:
          files: messages/en.json

      - name: Upload to Crowdin
        if: steps.changes.outputs.any_changed == 'true'
        uses: crowdin/github-action@v1
        with:
          upload_sources: true
          upload_translations: false
          download_translations: false
        env:
          CROWDIN_PROJECT_ID: "816438"
          CROWDIN_PERSONAL_TOKEN: "70f3fc562820d334fd7329abede970c98148dced4ed61a82866cee38b5a08271c282564c01f501ec"

      - name: Notify
        if: steps.changes.outputs.any_changed == 'true'
        run: echo "Uploaded new sources to Crowdin"

  ### ========== 2. DOWNLOAD JOB (only on webhook dispatch) ==========
  download-from-crowdin:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'crowdin_translation_ready'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download translations from Crowdin
        uses: crowdin/github-action@v1
        with:
          upload_sources: false
          upload_translations: false
          download_translations: true
          create_pull_request: true
          pull_request_title: "üåç Crowdin translations for commit ${{ github.sha }}"
          pull_request_body: |
            ## üåç Crowdin Translation Update

            **Triggered by:** Crowdin webhook
            **Author:** @${{ github.actor }}

            ### ‚úÖ Status
            - Translations auto-downloaded
            - PR created for merge

            ---
            *This PR was automatically created by the Crowdin GitHub integration.*
          pull_request_labels: "translations,automated,i18n"
          pull_request_assignees: "${{ github.actor }}"
          pull_request_base: "main"
          localization_branch_name: "crowdin-translations-${{ github.run_number }}"
          commit_message: "feat(i18n): update translations from Crowdin [skip ci]"
        env:
          CROWDIN_PROJECT_ID: "816438"
          CROWDIN_PERSONAL_TOKEN: "70f3fc562820d334fd7329abede970c98148dced4ed61a82866cee38b5a08271c282564c01f501ec"
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  ### ========== 3. AUTO-MERGE JOB ==========
  auto-merge-translations:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'crowdin_translation_ready'
    needs: download-from-crowdin
    runs-on: ubuntu-latest

    steps:
      - name: Wait and auto-merge if CI passes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prBranch = `crowdin-translations-${context.runNumber}`;

            const prs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${prBranch}`
            });

            if (prs.data.length === 0) {
              console.log("No translation PR found.");
              return;
            }

            const pr = prs.data[0];
            console.log(`Found PR #${pr.number}. Waiting for CI...`);

            const maxWait = 10 * 60 * 1000; // 10 minutes
            const pollInterval = 10000;
            const maxAttempts = maxWait / pollInterval;

            for (let attempt = 0; attempt < maxAttempts; attempt++) {
              const checks = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: pr.head.sha
              });

              const statuses = await github.rest.repos.listCommitStatusesForRef({
                owner,
                repo,
                ref: pr.head.sha
              });

              const all = [...checks.data.check_runs, ...statuses.data];

              const failed = all.filter(c =>
                c.conclusion === 'failure' || c.state === 'failure'
              );
              const pending = all.filter(c =>
                c.status === 'in_progress' || c.status === 'queued' || c.state === 'pending'
              );

              if (failed.length > 0) {
                console.log("CI failed. Not merging.");
                return;
              }

              if (pending.length === 0) {
                console.log("All checks passed. Merging...");

                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: pr.number,
                  merge_method: "squash",
                  commit_title: `feat(i18n): update translations from Crowdin (#${pr.number})`,
                  commit_message: "Auto-merged translation updates"
                });

                console.log("PR merged!");
                return;
              }

              console.log(`Waiting for ${pending.length} checks...`);
              await new Promise(r => setTimeout(r, pollInterval));
            }

            console.log("CI timeout. Manual review needed.");
